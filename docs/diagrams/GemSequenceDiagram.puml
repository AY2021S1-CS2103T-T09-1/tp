@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":GradPadParser" as GradPadParser LOGIC_COLOR
participant "G:GemCommand" as GemCommand LOGIC_COLOR
participant "sem1Storage:GemCommandStorage" as GemCommandStorage LOGIC_COLOR
participant "sem2Storage:GemCommandStorage" as GemCommandStorage2 LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("gem")
activate LogicManager

LogicManager -> GradPadParser : parseCommand("gem")
activate GradPadParser

create GemCommand
GradPadParser -> GemCommand
activate GemCommand

GemCommand --> GradPadParser : G
deactivate GemCommand

GradPadParser --> LogicManager : G
deactivate GradPadParser

LogicManager -> GemCommand : execute()
activate GemCommand

GemCommand -> GemCommand : setSem1Storage()
activate GemCommand

create GemCommandStorage
GemCommand -> GemCommandStorage : sem1Storage
activate GemCommandStorage

GemCommandStorage --> GemCommand : sem1Storage
deactivate GemCommandStorage

GemCommand -> GemCommand : setSem2Storage()
activate GemCommand

create GemCommandStorage2
GemCommand -> GemCommandStorage2 : sem2Storage
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : sem2Storage
deactivate GemCommandStorage2

GemCommand -> GemCommandStorage : setGehModules
activate GemCommandStorage

GemCommandStorage --> GemCommand : gehModules
deactivate GemCommandStorage

GemCommand -> GemCommandStorage : setGeqModules
activate GemCommandStorage

GemCommandStorage --> GemCommand : geqModules
deactivate GemCommandStorage

GemCommand -> GemCommandStorage : setGerModules
activate GemCommandStorage

GemCommandStorage --> GemCommand : gerModules
deactivate GemCommandStorage

GemCommand -> GemCommandStorage : setGesModules
activate GemCommandStorage

GemCommandStorage --> GemCommand : gesModules
deactivate GemCommandStorage

GemCommand -> GemCommandStorage : setGetModules
activate GemCommandStorage

GemCommandStorage --> GemCommand : getModules
deactivate GemCommandStorage

deactivate GemCommand

GemCommand -> GemCommandStorage2 : setGehModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : gehModules
deactivate GemCommandStorage2

GemCommand -> GemCommandStorage2 : setGeqModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : geqModules
deactivate GemCommandStorage2

GemCommand -> GemCommandStorage2 : setGerModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : gerModules
deactivate GemCommandStorage2

GemCommand -> GemCommandStorage2 : setGesModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : gesModules
deactivate GemCommandStorage2

GemCommand -> GemCommandStorage2 : setGetModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand : getModules
deactivate GemCommandStorage2
deactivate GemCommand

GemCommand -> GemCommandStorage : setCompiledModules
activate GemCommandStorage

GemCommandStorage --> GemCommand
deactivate GemCommandStorage

GemCommand -> GemCommandStorage2 : setCompiledModules
activate GemCommandStorage2

GemCommandStorage2 --> GemCommand
deactivate GemCommandStorage2

create CommandResult
GemCommand -> CommandResult : compiledModules
activate CommandResult

CommandResult --> GemCommand
deactivate CommandResult

GemCommand --> LogicManager
deactivate GemCommand

[<--LogicManager
deactivate LogicManager
@enduml
